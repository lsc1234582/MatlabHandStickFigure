function out = parseFile( fileName, hand )
% function data = parseFile( fileName )
% Parses the files generated by CyberGloves
%
% Inputs:
% <fileName>    Full path to the BVH file to be read.
%
% <hand>        Either 'L' or 'R' depending on the handedness of the glove.
%
% Outputs:
% <out>         Struct with fields 'ID', 'Time' and 'Data'.
%               If ID or Time is not supplied it is an empty matrix.
% 
% Written by Andreas Thomik, November 2014.

% Variables
hasTime = false;
hasID   = false;
delimiter = {'\t', ' '};
startRow = 1;

%% Try to figure out whether there are IDs/Time Stamps
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
fileID = fopen( fileName, 'r' );
% Read one line
dataArray = textscan( fileID, formatSpec, 1, 'Delimiter', delimiter, ...
    'MultipleDelimsAsOne', 1, 'HeaderLines', startRow-1, 'EmptyValue', NaN );

if isempty( sscanf( dataArray{1}{1}, '%d' ) ) % The first element is a char: we have IDs
    hasID = true;
end
    
switch hand
    case 'R'
        if ~isempty( dataArray{24}{1} )
            hasTime = true;
        end
    case 'L'
        if ~isempty( dataArray{20}{1} )
            hasTime = true;
        end
end

%% Set the format specifier depending on what's in the file
switch hand
    case 'R'
        if hasID && hasTime
            formatSpec = '%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        elseif hasID && ~hasTime
            formatSpec = '%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        elseif ~hasID && hasTime
            formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        else
            formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        end
    case 'L'
        if hasID && hasTime
            formatSpec = '%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        elseif hasID && ~hasTime
            formatSpec = '%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        elseif ~hasID && hasTime
            formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        else
            formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
        end
    otherwise
        error( 'Unknown hand type. Must be ''R'' or ''L''.' )
end

%% Open the text file.
fileID = fopen( fileName, 'r' );

%% Read columns of data according to format string.
dataArray = textscan( fileID, formatSpec, 'Delimiter', delimiter, ...
    'MultipleDelimsAsOne', 1, 'HeaderLines', startRow-1, 'EmptyValue', NaN, 'TreatAsEmpty', {'S', 'D'} );
dataArray(end) = [];    % Remove line feed
%% Close the text file.
fclose( fileID );

%% Check that the data is more or less clean
minLength = size( dataArray{1}, 1 );
sameLength = true;
for k = 2:size( dataArray, 2 )
    if size( dataArray{k}, 1 ) < minLength
        minLength = size( dataArray{k}, 1 );
        sameLength = false;
    end
end

if ~sameLength
    warning( ['The file ' fileName ' may be corrupted. Check line ' num2str( minLength ) ' !'] )
    for k = 1:size( dataArray, 2 )
        dataArray{k} = dataArray{k}(1:minLength);
    end
end

%% Output data
if hasID
    ID = dataArray{1};
    ix = ~strcmp( ID, 'D' ); % Other events
    ID = ID(ix);
    if hasTime
        IDTime = [dataArray{2:5}];
        IDTime = IDTime(ix, :);
        try
            IDTime = getMilliSecondTime( IDTime );
        catch
            IDTime = find( ix );
            warning( 'Could not figure time for special events. Returning indices instead' )
        end
    end
    dataArray(1) = [];
    out.ID.ID   = ID;
    out.ID.Time = IDTime;
else
    out.ID.ID   = [];
    out.ID.Time = [];
end

if hasTime
    time = [dataArray{1:4}];
    if hasID
        time(ix, :) = [];
    end
    
    % Check that all values are OK
    tMax = [23 59 59 999];
    tError = any( bsxfun( @gt,time, tMax ), 2 );
    time(tError, :) = NaN;
    
    out.Time = getMilliSecondTime( time );
    if any( isnan( out.Time ) )
        tix = isnan( out.Time );
        out.ID.Time = [out.ID.Time; find(tix)];
        out.ID.ID   = [out.ID.ID; repmat( {'E'}, sum( tix ), 1 )];
        warning( 'Found suspicious timestamps without labels. Indices returned in Events.' )
        out.Time(tix) = [];
    end
    dataArray(1:4) = [];
else
    out.Time = [];
end

data = [dataArray{1:end}];
if hasID
    data(ix, :) = [];
    if exist( 'tix', 'var' )
        data(tix, :) = [];
    end
elseif exist( 'tix', 'var' )
    data(tix, :) = [];
end

out.Data = data;

end