function data = parseFile( fileName )
% function data = parseFile( fileName )
% Parses the files generated by IGS suits.
%
% Inputs:
% <fileName>    Full path to the BVH file to be read.
%
% Outputs:
% <data>        NxD matrix of data read from the file.
% 
% Written by Andreas Thomik, November 2014.

% Set the format specifier
delimiter = '\t';
startRow = 130;
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

% Open the text file.
fileID = fopen( fileName, 'r' );

% Read columns of data according to format string.
dataArray = textscan( fileID, formatSpec, 'Delimiter', delimiter, ...
    'MultipleDelimsAsOne', 1, 'HeaderLines', startRow-1, 'EmptyValue', NaN );

% Close the text file.
fclose( fileID );

% Check that the data is more or less clean
minLength = size( dataArray{1}, 1 );
sameLength = true;
for k = 2:size( dataArray, 2 )
    if size( dataArray{k}, 1 ) < minLength
        minLength = size( dataArray{k}, 1 );
        sameLength = false;
    end
end

if ~sameLength
    warning( 'The data record may be corrupted. Check file!' )
    for k = 1:size( dataArray, 2 )
        dataArray{k} = dataArray{k}(1:minLength);
    end
end

data = [dataArray{1:end-1}];
% data = cellfun( @(x) sscanf( x, '%f'), data );

end