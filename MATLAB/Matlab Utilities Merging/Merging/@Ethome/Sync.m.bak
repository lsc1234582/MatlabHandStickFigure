function Sync( E, Fs )

time = cell( 4, 1 );
mods = {'Gaze', 'RightHand', 'LeftHand', 'Suit'};
mIX = false( 4, 1 );

%% Find sync points
if ~isempty(E.LeftHand.Events.Time)
    if sum((diff(E.LeftHand.Events.Time)>1))==0 % checks if IDs or actual time
        syncIDGlove=E.LeftHand.Events.Time(1);
        syncSysTimeGlove=E.LeftHand.Time(syncIDGlove);
        syncIDGaze=find(E.Gaze.Data(:,28)==1);
        syncSysTimeGaze=(E.Gaze.Time(syncIDGaze(1)-1)+E.Gaze.Time(syncIDGaze(1)))/2;
        timeGloveAhead=syncSysTimeGlove-syncSysTimeGaze;
        syncGazeTime=E.Gaze.Time+timeGloveAhead;
     else
        error('In timestamp not index format')
    end
        
end


%% Get time information for each modality, if available
if ~isempty( E.Gaze ) && ~isempty( E.Gaze.Time )
    time{1} =syncGazeTime;% E.Gaze.Time;
    mIX(1) = true;
else
    time{1} = NaN;
end
if ~isempty( E.RightHand ) && ~isempty( E.RightHand.Time )
    time{2} = E.RightHand.Time;
    mIX(2) = true;
else
    time{2} = NaN;
end
if ~isempty( E.LeftHand ) && ~isempty( E.LeftHand.Time )
    time{3} = E.LeftHand.Time;
    mIX(3) = true;
else
    time{3} = NaN;
end
if ~isempty( E.Suit ) && ~isempty( E.Suit.Time )
    time{4} = E.Suit.Time;
    mIX(4) = true;
else
    time{4} = NaN;
end

%% Find start and end time
tStart = cellfun( @(x) x(1), time );
tEnd = cellfun( @(x) x(end), time );

[~, ixS] = min( tStart );
[~, ixE] = max( tEnd );

tStart  = tStart(ixS);
tEnd    = tEnd(ixE);

%% Define new time vector
E.Time = (tStart:round( 1000/Fs ):tEnd)';


%% Compute size of new matrix and allocate memory
N = 0;
dataSize = zeros( 4, 1 );
for k = 1:4
    if mIX(k)
        if k~=4
            dataSize(k) = size( E.(mods{k}).Data, 2 );
        else 
            dataSize(k) = size( E.(mods{k}).Data, 2 );
        end
        
        N = N + dataSize(k);
        
    end
end
E.Data = nan( numel( E.Time ), N );
E.FrNumDataRate=nan( numel( E.Time ), 1 );

%%
for k = 1:4
    if ~mIX(k)
        continue
    end
    data = E.(mods{k}).Data;
    time = E.(mods{k}).Time;
    
    % Check for duplicate time stamps
    dT = diff( time );
    if any( dT == 0 )
        warning( ['Found duplicate time stamps in ' mods{k} '. Ignoring that data.'] )
        time(dT == 0) = [];
        data(dT == 0, :) = [];
    end
    ixS = find( E.Time - time(1) >= 0, 1, 'first' );
    ixE = find( E.Time - time(end) <= 0, 1, 'last' );
    if k ~= 4
        
        if k==1
            time=syncGazeTime;
          
            sysTime=interp1( time, data(:,1), E.Time(ixS:ixE), 'pchip' ); %sys time,eye frame, scene frame
            frNum= interp1( time, data(:,2:3), E.Time(ixS:ixE), 'nearest' ); %sys time,eye frame, scene frame
            noFrameNumIndex=find(data(:,3)>1e9);

            frNumDataRate=interp1( time, [data(noFrameNumIndex,3); (1:(numel(data(:,3))-numel(noFrameNumIndex)))'] , E.Time(ixS:ixE), 'nearest' ); %sys time,eye frame, scene frame
            
            rDat1 = InterpZeroCorrected( time, data(:,4:9), E.Time(ixS:ixE), 'pchip' ); % data
            rPupDat1=interp1( time, data(:,10:13), E.Time(ixS:ixE), 'nearest' );
            lDat1 = InterpZeroCorrected( time, data(:,14:21), E.Time(ixS:ixE), 'pchip' ); % data
            lPupDat1=interp1( time, data(:,22:25), E.Time(ixS:ixE), 'nearest' );
            bothDat1=InterpZeroCorrected( time, data(:,26:27), E.Time(ixS:ixE), 'pchip' ); % data
            
            evData= interp1( time, data(:,28), E.Time(ixS:ixE), 'nearest' ); % sync pnts
            
            IDFPupData=interp1( time, data(:,29:34), E.Time(ixS:ixE), 'pchip' ); %idf  data 

            IDFDat=InterpZeroCorrected( time, data(:,35:52), E.Time(ixS:ixE), 'pchip' ); % data

            idfEvData=interp1( time, data(:,53:54), E.Time(ixS:ixE), 'nearest' ); % frame num, event info
            iData=[sysTime, frNum,rDat1,rPupDat1,lDat1,lPupDat1,bothDat1,evData,IDFPupData,IDFDat,idfEvData];
            
        else
            iData = interp1( time, data, E.Time(ixS:ixE), 'pchip' );
        end
            
    else
        data = data / 180 * pi; % Convert to radians for quaternion computation
        iData = zeros( numel( ixS:ixE ), size( data, 2 ) );
        for l = 1:3:66
            if ~any( roundn( data(:, l:l+2), -3 ) )
                continue
            elseif k == 1
                iData(:, l:l+2) = interp1( time, data(:, l:l+2), E.Time(ixS:ixE), 'pchip' );
            else
                iData(:, l:l+2) = angleInterp( time, data(:, l:l+2), E.Time(ixS:ixE), 'zxy' );
            end
        end
        iData = iData * 180 / pi; % Convert back to angles
    end
    
    if k == 1
        E.Data(ixS:ixE, 1:dataSize(k)) = iData ;
        E.FrNumDataRate(ixS:ixE)=frNumDataRate;

    else
        dIX = (sum( dataSize(1:k-1) ) + 1):sum( dataSize(1:k) );
        E.Data(ixS:ixE, dIX) = iData;
    end
end

% Set new sampling time
E.Fs = Fs;

% Update data labels
E.makeDataLabels( mods(mIX) );

end