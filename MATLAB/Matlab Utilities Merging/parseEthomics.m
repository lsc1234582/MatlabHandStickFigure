function [data, time, ID] = parseEthomics( filename, dataType, dataOnly )
% function [data, time] = parseEthomics( filename, dataType )
% Parses the files generated by the various motion capture devices.
%
% Inputs:
% <fileName>    Character array indicating the name of the file to be
%               parsed. Can also be the absolute or relative path to the
%               file.
% 
% <dataType>    Character array indicating the type of data to be parsed.
%               Options are:
%                   - 'leftHand' for data from the Cyberglove 1.
%                   - 'rightHand' for data from the Cyberglove 3.
%                   - 'suitData' for data from the IGS-180.
%                   - 'suitTime' time-stamps for the IGS-180.
%                   - 'eyeTracker' for data from the eye-tracker.
%
% <dataOnly>    Logical value. If true, only returns data points, if false,
%               also returns synchronisation and calibration time points.
%
% Outputs:
% <data>        NxD matrix of data read from the file.
%               Note: this will be [] if 'dataType' == 'suitTime'.
% 
% <time>        Nx4 matrix of time-stamps.
%               Note: this will be [] if 'dataType' == 'suitData'.
% 
% Written by Andreas Thomik, August 2013.



% Set the format specifier depending on what kind of file we are opening
if strcmp( dataType, 'leftHand' )
    delimiter = {'\t', ' '};
    startRow = 1;
    formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
elseif strcmp( dataType, 'rightHand' )
    delimiter = {'\t', ' '};
    startRow = 1;
    formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
elseif strcmp( dataType, 'suitData' )
    delimiter = '\t';
    startRow = 130;
    formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
elseif strcmp( dataType, 'suitTime' )
    delimiter = {' '};
    startRow = 1;
    formatSpec = '%s%s%s%s%s%s%[^\n\r]';
% elseif strcmp( dataType, 'eyeTracker' ) % no longer handled here
%     delimiter = {'\t', ' '};
%     startRow = 1;
%     formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
else
    error( 'This function is not made to parse this kind of file.' )
end

% Open the text file.
fileID = fopen( filename, 'r' );

% Read columns of data according to format string.
dataArray = textscan( fileID, formatSpec, 'Delimiter', delimiter, ...
    'MultipleDelimsAsOne', 1, 'HeaderLines', startRow-1, 'EmptyValue', NaN );

% Close the text file.
fclose( fileID );

% Return the data and time stamp according to the file read
minLength = size( dataArray{1}, 1 );
sameLength = true;
for k = 2:size( dataArray, 2 )
    if size( dataArray{k}, 1 ) < minLength
        minLength = size( dataArray{k}, 1 );
        sameLength = false;
    end
end

if ~sameLength
    for k = 1:size( dataArray, 2 )
        dataArray{k} = dataArray{k}(1:minLength);
    end
end

data = [dataArray{1:end-1}];
if ~isempty( strfind( dataType, 'Hand' ) )
    if any( cellfun( @(x) strcmp( x, 'D' ), data(:, 1) ) ) % We have time stamps and IDs
        ID      = data(:, 1);
        timeArr = str2double( data(:, 2:5) );
        time    = getMilliSecondTime( timeArr );
        data    = str2double( data(:, 6:end) );
    elseif ~all( cellfun( @(x)strcmp(x, ''), data(:, end-1) ) ) % We have timestamps but no IDs because 4 timestamp, 22 dimensions data, so if 27 empty no IDs
        timeArr = str2double( data(:, 1:4) );
        time    = getMilliSecondTime( timeArr );
        ID      = cell( size( data, 1 ), 1 );
        % Deal with synchronisation points when we don't have IDs
        if any( isnan( time ) )
            iS = isnan( time );
            ID(iS)  = {'S'};
            ID(~iS) = {'D'};
            timeArr(iS, :) = str2double( data(iS, 2:5) );
            time = getMilliSecondTime( timeArr );
            if any( isnan( time ) )
                ix = find( isnan( time ) );
                warning( ['Could not resolve time stamp at line(s) ' num2str( ix ) '.'] )
            end
        end  
        
        data    = str2double( data(:, 5:end-1) );
        
        % Deal with synchronisation points when we don't have IDs
        if any( isnan( time ) )
            iS = isnan( time );
            ID(iS)  = {'S'};
            ID(~iS) = {'D'};
        end    
    else % We have neither IDs nor timestamps
        ix = all( isnan( data ), 1 );
        ID      = [];
        time    = [];
        data    = str2double( data(:, ~ix) );
        error('No time stamps or IDs');
    end
    
    % Do a bit of error handling
    if any( isnan( time ) )
        ix = isnan( time );
        if all( strcmpi( ID(ix), 'S' ) )
            disp( ['Identified ' num2str( sum( ix ) ) ' faulty lines in the file.'] )
            disp( 'Looks like they are special time stamps, I''ll keep them there.' )
        else
            ix = ix & ~strcmpi( ID, 'S' );
            disp( ['Could not assign lines ' num2str( find( ix ) ) '.'] )
            disp( 'I''ll discard them for now.' )
            data(ix, :) = [];
            time(ix, :) = [];
            ID(ix, :)   = [];
        end
    end
    
    % Check data integrity
    if ~isempty( ID )
        ixD = strcmp( ID, 'D' );
    else
        ixD = true( size( data, 1 ), 1 );
    end
    ixNaN = bsxfun( @and, isnan( data ), ixD );
    if any( ixNaN(:) )
        ix = find( ixNaN );
        [r, ~] = ind2sub( size( data ), ix );
        r = unique( r );
        disp( ['Line(s) ' num2str( r ) ' seem to have some fault.'] )
        disp( 'Discarding them for now. You may want to check the file.' )
        data(r, :) = [];
        time(r, :) = [];
        ID(r, :)   = [];
    end
    
    % Filter data if requested by user
    if dataOnly && ~isempty( ID )
        time = time(strcmp( ID, 'D' ), :);
        data = data(strcmp( ID, 'D' ), :);
    end   
elseif strcmp( dataType, 'suitData' )
    data = str2double( data );
    time = [];
elseif strcmp( dataType, 'suitTime' )
    timeArr = str2double( data( strcmp( '#T', data(:,1) ), 2:end-1) );
    time = getMilliSecondTime( timeArr );
    data = [];
end

end